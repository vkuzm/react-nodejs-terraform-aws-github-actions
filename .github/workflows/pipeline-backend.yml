name: Pipeline CI/CD for Back-End

env:
  NODE_VERSION: 12
  WORKING_DIRECTORY: ./backend
  TF_WORKING_DIRECTORY: ./terraform/backend
  IMAGE_NAME: "mindzoom/users-app"
  IMAGE_TAG: ${{ github.sha }}
  PORT_CONTAINER: "8081"
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: "eu-central-1"
  AWS_STATE_BUCKET_NAME: ${{ secrets.AWS_STATE_BUCKET_NAME }}
  AWS_STATE_BUCKET_PATH: ${{ secrets.AWS_STATE_BUCKET_PATH }}
  AWS_STATE_DB_TABLE: ${{ secrets.AWS_STATE_DB_TABLE }}
  
on:
  push:
    branches: [ main ]
    paths:    
      - 'backend/**'
      #- '.github/workflows/pipeline-backend.yml'
  pull_request:
    branches: [ main ]
    paths:    
      - 'backend/**'  

jobs:
  test:
    name: 'Run Tests'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      # Install dependencies
      - name: npm install
        run: npm install
          
      # Run tests
      - name: run tests
        run: npm test
      
      # Run ESLint
      - name: run eslint
        run: npx eslint app/*
        
  terraform-plan:
    if: github.event_name == 'pull_request'
    name: 'Terraform Plan'
    needs: [test]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.TF_WORKING_DIRECTORY }}
    steps:
    - uses: actions/checkout@v2
    - uses: hashicorp/setup-terraform@v1
    
    - name: Terraform Init
      id: init
      run: |
        terraform init \
              -backend-config="bucket=${{ env.AWS_STATE_BUCKET_NAME }}" \
              -backend-config="key=${{ env.AWS_STATE_BUCKET_PATH }}" \
              -backend-config="region=${{ env.AWS_REGION }}" \
              -backend-config="dynamodb_table=${{ env.AWS_STATE_DB_TABLE }}" \
              -backend-config="access_key=${{ env.AWS_ACCESS_KEY_ID }}" \
              -backend-config="secret_key=${{ env.AWS_SECRET_ACCESS_KEY }}"

    #- name: Terraform Format
    #  id: fmt
    #  run: terraform fmt -check

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      env:
        TF_VAR_DOCKER_IMAGE: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} 
        TF_VAR_PORT_CONTAINER: ${{ env.PORT_CONTAINER }}
      run: terraform plan -no-color -lock=false
      continue-on-error: true

    - uses: actions/github-script@0.9.0
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`${process.env.PLAN}\`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
                   
  build-and-push:
    name: 'Build And Push'
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [test]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    steps:
      - uses: actions/checkout@v2
      - name: Docker Build & Push to container registry
        run: |
          docker build . -t ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          docker login -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD }} 
          docker push ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} 
          
  deploy:
    name: 'Terraform Deploy'
    needs: [build-and-push]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.TF_WORKING_DIRECTORY }} 
    steps:
    - uses: actions/checkout@v2
    - uses: hashicorp/setup-terraform@v1

    - name: Terraform Init
      id: init
      run: |
        terraform init \
              -backend-config="bucket=${{ env.AWS_STATE_BUCKET_NAME }}" \
              -backend-config="key=${{ env.AWS_STATE_BUCKET_PATH }}" \
              -backend-config="region=${{ env.AWS_REGION }}" \
              -backend-config="dynamodb_table=${{ env.AWS_STATE_DB_TABLE }}" \
              -backend-config="access_key=${{ env.AWS_ACCESS_KEY_ID }}" \
              -backend-config="secret_key=${{ env.AWS_SECRET_ACCESS_KEY }}"

    - name: Terraform Plan
      id: plan
      env:
        TF_VAR_DOCKER_IMAGE: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} 
        TF_VAR_PORT_CONTAINER: ${{ env.PORT_CONTAINER }}
      run: terraform plan -no-color
      continue-on-error: true

    - name: Terraform Apply
      env:
        TF_VAR_DOCKER_IMAGE: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} 
        TF_VAR_PORT_CONTAINER: ${{ env.PORT_CONTAINER }}
      run: terraform apply -auto-approve
      
